#!/usr/bin/env node

var fs = require('fs');
var http = require('http');
var program = require('commander');
var pack = require('./package.json');
var unpipe = require('unpipe');

program
  .version(pack.version)
  .option('-p --port [8080]', 'Set the port for the http server to listen on', parseInt)
  .parse(process.argv);

var IMG = fs.readFileSync(__dirname + '/img.jpg');
var boundary = '--boundandrebound';
var port = program.port || 8080;

console.log('=== server listening on', port, '===');

http.createServer(function (req, res) {
  // A request to http://localhost/stream returns an unending sequence of jpegs
  // Listen for a disconnect from the client to properly unpipe the jpeg stream
  if (/stream/.test(req.url)) {
    res.writeHead(200, { 'Content-Type': 'multipart/x-mixed-replace; boundary=' + boundary });
    let closed = false;

    res.on('close', function () {
      closed = true;
    });

    function emitData() {
      res.write(boundary + '\nContent-Type: image/jpeg\nContent-Length: ' + IMG.length + '\n\n');
      res.write(IMG);
    }

    var interval = setInterval(function() {
      if (closed) {
        clearInterval(interval);
        res.end();
      } else {
        emitData();
      }
    }, 1000);
    
    res.end();
  }
  else {
    res.writeHead(200, { 'Content-Type': 'text/html' });
    res.end('<!doctype html>\
              <html>\
                <head>\
                  <title>Streaming</title>\
                </head>\
                <body style="background:#000;">\
                  <img src="/stream" style="width:100%;height:auto;">\
                </body>\
              </html>');
  }
}).listen(port);
